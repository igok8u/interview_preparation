Clean code
	Useful thinks
		- Clean code can be summarized as a code that any developer can read and change easily
		- Martin Fowler - Any fool can write code that a computer can understand. Good programmers write code that humans can understand.
		- Characteristics of Clean Code
			Focused (code should be written to solve a specific problem)
			Simple
			Testable
		- Project structure
		- Naming convention
		- Source file structure
		- Whitespaces, Indentation
		- Method signature
		- Hardcoding
		- Code comments
		- Logging
		- SOLID
			- Single Responsibility 
				Every interface, class, or method we define should have a clearly defined goal. In essence, it should ideally do one thing and do that well. This effectively leads to smaller methods and classes which are also testable.
			- Open-Closed Principle
				The code that we write should ideally be open for extension but closed for modification. What this effectively means is that a class should be written in a manner that there should not be any need to modify it. However, it should allow for changes through inheritance or composition.
			- Liskov Substitution Principle
				What this principle states is that every subclass or derived class should be substitutable for their parent or base class. This helps in reducing coupling in the codebase and hence improve reusability across.
			- Interface Segregation Principle
				Implementing an interface is a way to provide a specific behavior to our class. However, a class must not need to implement methods that it does not require. What this requires us to do is to define smaller, more focussed interfaces.
			- Dependency Inversion Principle
				According to this principle, classes should only depend on abstractions and not on their concrete implementations. This effectively means that a class should not be responsible for creating instances for their dependencies. Rather, such dependencies should be injected into the class.
		- DRY(Don's Repeat Yourself) & KISS (Keep It Simple, Stupid)
		- TDD