Patterns
	- System Design
		- MVC (Model-View-Controller)
		- MVP (Model-View-Presenter)
		- MVVM (Model-View-ViewModel)
		- Layered architecture
		- Microservices
		- Event-driven architecture
		- Clean Architecture
		- Hexagonal Architecture
		- Domain-Driven Design
		- Service-Oriented Architecture (SOA)
		- Event Sourcing
		- Command Query Responsibility Segregation (CQRS)
		- Representational State Transfer (REST)
		- Peer-to-Peer (P2P) Architecture
		- Big Data Architecture
		- Cloud Computing Architecture
		- Reactive Architecture
		- Serverless Architecture
		- Batch Processing Architecture
		- Stream Processing Architecture
		- Pipe and Filter Architecture
		- Blackboard Architecture
		- Data-centric Architecture
		- Distributed Architecture
		- Broker Architecture
		- Federated Architecture
		- Space-Based Architecture
		- Object-Oriented Architecture
		- Component-Based Architecture
		- Event-Driven Messaging Architecture
		- Multi-tier Architecture
		- Three-Tier Architecture
		- N-Tier Architecture
		- Monolithic Architecture
		- Layered Monolithic Architecture
		- Modular Monolithic Architecture
		- Gateway Architecture
		- Frontend-Backend Separation Architecture
		- Service Mesh Architecture
		- Hybrid Architecture
		- Batch Sequential Architecture
		- Master-Slave Architecture
		- Active-Active Architecture
		- Active-Passive Architecture
		- Shared Nothing Architecture
		- Replicated Architecture
		- Cache-Aside Architecture
		- Static Content Hosting Architecture
		- Dynamic Content Hosting Architecture
		- Immutable Infrastructure Architecture
	- Java
		- Cretional 
		- Abstract Factory
		- Builder
		- Factory method
		- Prototype
		- Singleton
	- Structural
		- Adapter
		- Bridge
		- Composite
		- Decorator
		- Facade
		- Flyweight
		- Proxy
	- Bevioral
		- Chain of Responsibility
		- Command
		- Iterator
		- Mediator
		- Memento
		- Observer
		- State
		- Strategy
		- Template method
		- Visitor
        
        
        
Singleton - The Singleton pattern is used to ensure that a class has only one instance, and to provide a global point of access to that instance.

Factory Method - The Factory Method pattern is used to define an interface for creating objects, but let subclasses decide which classes to instantiate.

Abstract Factory - The Abstract Factory pattern is used to provide an interface for creating families of related or dependent objects without specifying their concrete classes.

Builder - The Builder pattern is used to separate the construction of a complex object from its representation, allowing the same construction process to create different representations.

Prototype - The Prototype pattern is used to create new objects by cloning existing objects, rather than by creating new instances from scratch.

Adapter - The Adapter pattern is used to convert the interface of a class into another interface that clients expect. This allows classes with incompatible interfaces to work together.

Decorator - The Decorator pattern is used to add new functionality to an existing object without changing its structure.

Facade - The Facade pattern is used to provide a simplified interface to a complex system, making it easier to use.

Proxy - The Proxy pattern is used to provide a surrogate or placeholder for another object to control access to it.

Observer - The Observer pattern is used to define a one-to-many relationship between objects, so that when one object changes state, all of its dependents are notified and updated automatically.
